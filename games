<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BrainyBuddies - Educational Games for Kids</title>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
    
    <style>
        :root {
            --primary-blue: #4A90E2;
            --primary-yellow: #FFD166;
            --primary-red: #EF476F;
            --primary-green: #06D6A0;
            --primary-purple: #9C6ADE;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Comic Sans MS', 'Nunito', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #2D3748;
        }
        
        .screen {
            display: none;
            min-height: 100vh;
            padding: 20px;
        }
        
        .active {
            display: block;
        }
        
        /* Landing Screen */
        .landing-container {
            text-align: center;
            padding: 2rem;
            color: white;
            max-width: 600px;
            margin: 0 auto;
            padding-top: 4rem;
        }
        
        .logo {
            font-size: 3.5rem;
            margin-bottom: 1rem;
        }
        
        .tagline {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .game-button {
            background: var(--primary-yellow);
            color: #2D3748;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.2rem;
            cursor: pointer;
            margin: 10px;
            font-weight: bold;
            box-shadow: var(--shadow);
            transition: transform 0.2s;
        }
        
        .game-button:hover {
            transform: scale(1.05);
        }
        
        .button-primary {
            background: var(--primary-green);
            color: white;
        }
        
        .button-premium {
            background: linear-gradient(135deg, #FFD166, #FF9E66);
            color: white;
            font-weight: bold;
        }
        
        /* Payment Styles */
        .payment-container {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            max-width: 500px;
            margin: 2rem auto;
            box-shadow: var(--shadow);
        }
        
        .plan-card {
            border: 2px solid #ddd;
            border-radius: 15px;
            padding: 1.5rem;
            margin: 1rem 0;
            transition: transform 0.3s;
        }
        
        .plan-card:hover {
            transform: translateY(-5px);
        }
        
        .plan-card.premium {
            border-color: var(--primary-yellow);
            background: linear-gradient(135deg, #FFF9E6, #FFF0CC);
            position: relative;
            overflow: hidden;
        }
        
        .plan-card.premium::before {
            content: "🌟 MOST POPULAR";
            position: absolute;
            top: 10px;
            right: -30px;
            background: var(--primary-yellow);
            color: #2D3748;
            padding: 5px 30px;
            font-size: 0.8rem;
            font-weight: bold;
            transform: rotate(45deg);
        }
        
        .price {
            font-size: 2.5rem;
            font-weight: bold;
            color: var(--primary-purple);
            margin: 1rem 0;
        }
        
        .price-period {
            font-size: 1rem;
            color: #666;
        }
        
        .feature-list {
            list-style: none;
            margin: 1rem 0;
        }
        
        .feature-list li {
            padding: 0.5rem 0;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .feature-list li:before {
            content: "✓";
            color: var(--primary-green);
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .stripe-badge {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin: 1rem 0;
            font-size: 0.9rem;
            color: #666;
        }
        
        .test-mode-banner {
            background: #fff3cd;
            border: 2px solid #ffeaa7;
            border-radius: 10px;
            padding: 1rem;
            margin: 1rem 0;
            text-align: center;
        }
        
        .payment-options {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
        }
        
        .payment-option {
            flex: 1;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .payment-option.selected {
            border-color: var(--primary-blue);
            background: #f0f8ff;
        }
        
        .payment-success {
            text-align: center;
            padding: 2rem;
        }
        
        .success-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        /* Login Required Modal */
        .login-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .login-modal.active {
            display: flex;
        }
        
        .modal-content {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            max-width: 400px;
            width: 90%;
            text-align: center;
            box-shadow: var(--shadow);
        }
        
        .modal-buttons {
            display: flex;
            gap: 1rem;
            margin: 1.5rem 0;
        }
        
        .modal-button {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .modal-button.primary {
            background: var(--primary-green);
            color: white;
        }
        
        .modal-button.secondary {
            background: #e2e8f0;
            color: #2D3748;
        }

        /* Rest of your existing CSS remains the same */
        .hub-container {
            background: white;
            border-radius: 20px;
            padding: 1rem;
            min-height: 80vh;
        }
        
        .hub-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        .player-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--primary-blue);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
        }
        
        .game-worlds {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }
        
        .world-card {
            background: linear-gradient(135deg, var(--primary-blue), var(--primary-purple));
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            cursor: pointer;
            box-shadow: var(--shadow);
            transition: transform 0.3s;
        }
        
        .world-card:hover {
            transform: translateY(-5px);
        }
        
        .world-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        .world-card.premium-locked {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
            position: relative;
        }
        
        .premium-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--primary-yellow);
            color: #2D3748;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: bold;
        }
        
        .status-box {
            padding: 1rem;
            border-radius: 10px;
            margin: 1rem 0;
            background: #e8f5e8;
            border-left: 4px solid var(--primary-green);
        }
        
        .status-box.error {
            background: #ffe8e8;
            border-left-color: var(--primary-red);
        }
        
        .status-box.warning {
            background: #fff3cd;
            border-left-color: var(--primary-yellow);
        }
        
        .status-box.info {
            background: #e8f4ff;
            border-left-color: var(--primary-blue);
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Game containers */
        .game-container {
            background: white;
            border-radius: 20px;
            padding: 1rem;
            text-align: center;
            min-height: 80vh;
        }
        
        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        
        /* Memory Game */
        .memory-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            max-width: 500px;
            margin: 0 auto;
        }
        
        .memory-card {
            aspect-ratio: 1;
            background: var(--primary-blue);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            cursor: pointer;
            transition: transform 0.3s, background-color 0.3s;
        }
        
        .memory-card.flipped {
            background: white;
            transform: rotateY(180deg);
        }
        
        .memory-card.matched {
            background: var(--primary-green);
            cursor: default;
        }
        
        /* Math Game */
        .math-problem {
            font-size: 2.5rem;
            margin: 2rem 0;
            color: var(--primary-purple);
        }
        
        .math-options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            max-width: 300px;
            margin: 0 auto;
        }
        
        .math-option {
            padding: 1rem;
            font-size: 1.5rem;
            background: var(--primary-blue);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .math-option:hover {
            transform: scale(1.05);
        }
        
        .game-message {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary-green);
            margin: 1rem 0;
        }
        
        .nav-button {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
        }
    </style>
</head>
<body>
    <!-- Login Required Modal -->
    <div id="loginRequiredModal" class="login-modal">
        <div class="modal-content">
            <div style="font-size: 3rem; margin-bottom: 1rem;">🔐</div>
            <h3>Login Required</h3>
            <p>Please sign in to continue with your purchase. This helps us:</p>
            <ul style="text-align: left; margin: 1rem 0; color: #666;">
                <li>Save your progress across devices</li>
                <li>Activate your premium features instantly</li>
                <li>Provide customer support if needed</li>
            </ul>
            <div class="modal-buttons">
                <button class="modal-button secondary" onclick="hideLoginModal()">Maybe Later</button>
                <button class="modal-button primary" onclick="redirectToLogin()">Sign In Now</button>
            </div>
        </div>
    </div>

    <!-- Landing Screen -->
    <div id="landingScreen" class="screen active">
        <div class="landing-container">
            <div class="logo">🧠</div>
            <h1>BrainyBuddies Playground</h1>
            <p class="tagline">Where Learning Meets Play!</p>
            <p>5+ Educational Games for Kids!</p>
            
            <div style="margin: 3rem 0;">
                <button class="game-button button-primary" onclick="showScreen('loginScreen')">
                    Let's Play FREE!
                </button>
                <button class="game-button button-premium" onclick="checkAuthAndShowPricing()">
                    🚀 Go Premium
                </button>
            </div>
            
            <div style="margin-top: 2rem; display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">🎮</div>
                    <div>6 Games</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">🧩</div>
                    <div>Puzzles</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">🔢</div>
                    <div>Math</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">🔤</div>
                    <div>Spelling</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Login Screen -->
    <div id="loginScreen" class="screen">
        <button class="nav-button" onclick="goBackFromLogin()">← Back</button>
        <div class="payment-container">
            <h2>Welcome to BrainyBuddies! 🎮</h2>
            <p>Sign in to save progress and unlock premium features</p>
            
            <div style="margin: 2rem 0;">
                <button class="social-button google" onclick="realGoogleSignIn()" id="googleSignIn" style="width: 100%; padding: 15px; font-size: 1.1rem;">
                    <span>🔵</span> Continue with Google
                </button>
            </div>
            
            <div style="margin: 1.5rem 0; text-align: center;">
                <div style="display: flex; align-items: center; margin: 1rem 0;">
                    <div style="flex: 1; height: 1px; background: #e2e8f0;"></div>
                    <div style="padding: 0 1rem; color: #666; font-size: 0.9rem;">or</div>
                    <div style="flex: 1; height: 1px; background: #e2e8f0;"></div>
                </div>
                
                <button class="social-button" onclick="tryQuickPlay()" id="quickPlayBtn" style="width: 100%; padding: 15px; font-size: 1.1rem;">
                    <span>🎮</span> Continue as Guest
                </button>
                <p style="font-size: 0.8rem; color: #666; margin-top: 0.5rem;">
                    Guest progress is temporary and won't be saved
                </p>
            </div>
            
            <div id="loginStatus" class="status-box" style="display: none;"></div>
            
            <div style="background: #f0f8ff; padding: 1rem; border-radius: 10px; margin: 1rem 0;">
                <h4>🎯 Why Sign In?</h4>
                <ul style="text-align: left; margin: 0.5rem 0; font-size: 0.9rem;">
                    <li>Save game progress permanently</li>
                    <li>Access your account on any device</li>
                    <li>Unlock premium features</li>
                    <li>Get personalized learning recommendations</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Pricing Screen -->
    <div id="pricingScreen" class="screen">
        <button class="nav-button" onclick="goBackFromPricing()">← Back</button>
        <div class="payment-container">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
                <h2>🌟 Upgrade to Super Explorer!</h2>
                <div style="display: flex; align-items: center; gap: 0.5rem; background: #e8f5e8; padding: 0.5rem 1rem; border-radius: 20px;">
                    <div class="avatar" id="pricingAvatar" style="width: 30px; height: 30px; font-size: 0.9rem;">👤</div>
                    <span id="pricingUserName" style="font-weight: bold;">Guest</span>
                </div>
            </div>
            <p>Unlock all games and premium features</p>
            
            <div class="test-mode-banner">
                <strong>🎉 LIVE PAYMENTS ENABLED</strong>
                <p>Real payments processed securely via Stripe</p>
            </div>
            
            <div class="plan-card">
                <h4>🎮 Free Plan</h4>
                <div class="price">$0<span class="price-period">/forever</span></div>
                <ul class="feature-list">
                    <li>Access to 2 basic games</li>
                    <li>Limited game levels</li>
                    <li>Basic progress tracking</li>
                    <li>Standard support</li>
                </ul>
                <button class="game-button" style="background: #95a5a6; color: white;" disabled>
                    Current Plan
                </button>
            </div>
            
            <div class="plan-card premium">
                <h4>🌟 Super Explorer Premium</h4>
                <div class="price">$4.99<span class="price-period">/month</span></div>
                <ul class="feature-list">
                    <li>Unlimited access to ALL games</li>
                    <li>100+ levels and new content weekly</li>
                    <li>Ad-free gaming experience</li>
                    <li>All avatars and custom themes</li>
                    <li>Exclusive seasonal content</li>
                    <li>Detailed progress analytics</li>
                    <li>Priority customer support</li>
                </ul>
                
                <div class="payment-options">
                    <div class="payment-option selected" onclick="selectPaymentOption('monthly')">
                        <div>Monthly</div>
                        <div style="font-weight: bold;">$4.99/month</div>
                    </div>
                    <div class="payment-option" onclick="selectPaymentOption('yearly')">
                        <div>Yearly</div>
                        <div style="font-weight: bold;">$49.99/year</div>
                        <div style="font-size: 0.8rem; color: var(--primary-green);">Save 16%</div>
                    </div>
                </div>
                
                <button class="game-button button-premium" onclick="processStripePayment()" style="width: 100%;" id="subscribeButton">
                    💳 Subscribe Now
                </button>
                
                <div class="stripe-badge">
                    <span>🔒 Secure payments by</span>
                    <strong>Stripe</strong>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 2rem; font-size: 0.9rem; color: #666;">
                <p>✅ Cancel anytime • 🔄 7-day money-back guarantee</p>
            </div>
        </div>
    </div>

    <!-- Payment Processing Screen -->
    <div id="paymentProcessing" class="screen">
        <div class="payment-container">
            <div style="text-align: center;">
                <div class="loading" style="width: 50px; height: 50px; margin: 2rem auto;"></div>
                <h3>Redirecting to Secure Payment...</h3>
                <p>You're being redirected to Stripe to complete your purchase.</p>
                <p style="font-size: 0.9rem; color: #666;">This window will redirect automatically.</p>
            </div>
        </div>
    </div>

    <!-- Game Hub -->
    <div id="gameHub" class="screen">
        <div class="hub-container">
            <div class="hub-header">
                <button class="nav-button" onclick="handleLogout()">← Logout</button>
                <div class="player-info">
                    <div class="avatar" id="userAvatar">🐱</div>
                    <div>
                        <div>Player: <strong id="playerName">Buddy</strong></div>
                        <div>Plan: <strong id="userPlan">FREE</strong> | Coins: <strong id="coinCount">50</strong> 🪙</div>
                    </div>
                </div>
                <button class="nav-button" onclick="checkAuthAndShowPricing()">
                    <span id="premiumIcon">⭐</span>
                </button>
            </div>
            
            <h2>Choose Your Game! 🎮</h2>
            <p id="hubSubtitle">Free games available for everyone!</p>
            
            <div class="game-worlds">
                <div class="world-card" onclick="startGame('memory')">
                    <div class="world-icon">🃏</div>
                    <h3>Memory Match</h3>
                    <p>Find matching pairs!</p>
                    <div style="margin-top: 1rem; font-size: 0.9rem;">⭐ FREE</div>
                </div>
                
                <div class="world-card" onclick="startGame('math')">
                    <div class="world-icon">🔢</div>
                    <h3>Math Adventure</h3>
                    <p>Solve fun math problems!</p>
                    <div style="margin-top: 1rem; font-size: 0.9rem;">⭐ FREE</div>
                </div>
                
                <div class="world-card premium-locked" onclick="checkPremiumAccess('Puzzle Palace')">
                    <div class="premium-badge">PREMIUM</div>
                    <div class="world-icon">🧩</div>
                    <h3>Puzzle Palace</h3>
                    <p>Challenging puzzles!</p>
                </div>
                
                <div class="world-card premium-locked" onclick="checkPremiumAccess('Shape Safari')">
                    <div class="premium-badge">PREMIUM</div>
                    <div class="world-icon">🔺</div>
                    <h3>Shape Safari</h3>
                    <p>Learn shapes & patterns!</p>
                </div>
                
                <div class="world-card premium-locked" onclick="checkPremiumAccess('Word Woods')">
                    <div class="premium-badge">PREMIUM</div>
                    <div class="world-icon">🔤</div>
                    <h3>Word Woods</h3>
                    <p>Spelling adventures!</p>
                </div>
                
                <div class="world-card premium-locked" onclick="checkPremiumAccess('Science Lab')">
                    <div class="premium-badge">PREMIUM</div>
                    <div class="world-icon">🔬</div>
                    <h3>Science Lab</h3>
                    <p>Fun experiments!</p>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 2rem;">
                <button class="game-button button-premium" onclick="checkAuthAndShowPricing()">
                    🚀 Unlock All Games
                </button>
            </div>
        </div>
    </div>

    <!-- Memory Game -->
    <div id="memoryGame" class="screen">
        <div class="game-container">
            <div class="game-header">
                <button class="nav-button" onclick="showScreen('gameHub')">← Back</button>
                <div class="score-display">
                    Matches: <span id="matchCount">0</span>/6 | 
                    Moves: <span id="moveCount">0</span>
                </div>
                <button class="nav-button" onclick="resetMemoryGame()">🔄</button>
            </div>
            
            <h2>Memory Match 🃏</h2>
            <p>Find all the matching pairs!</p>
            
            <div class="memory-grid" id="memoryGrid"></div>
            <div id="memoryMessage" class="game-message"></div>
        </div>
    </div>

    <!-- Math Game -->
    <div id="mathGame" class="screen">
        <div class="game-container">
            <div class="game-header">
                <button class="nav-button" onclick="showScreen('gameHub')">← Back</button>
                <div class="score-display">
                    Correct: <span id="mathCorrect">0</span> |
                    Streak: <span id="mathStreak">0</span> 🔥
                </div>
                <button class="nav-button" onclick="resetMathGame()">🔄</button>
            </div>
            
            <h2>Math Adventure 🔢</h2>
            <p>Solve the addition problems!</p>
            
            <div class="math-problem" id="mathProblem">5 + 3 = ?</div>
            <div class="math-options" id="mathOptions"></div>
            <div id="mathMessage" class="game-message"></div>
        </div>
    </div>

    <script>
        // =============================================
        // FIREBASE CONFIGURATION
        // =============================================
        
        const firebaseConfig = {
            apiKey: "AIzaSyCOMvFWOaGGV_UJ6gDtP63dvMIxyGaed4o",
            authDomain: "brainybuddies-playground.firebaseapp.com",
            projectId: "brainybuddies-playground",
            storageBucket: "brainybuddies-playground.firebasestorage.app",
            messagingSenderId: "48581087063",
            appId: "1:48581087063:web:c03efb6013b8c6adb03812"
        };

        // =============================================
        // STRIPE PAYMENT LINKS - YOUR ACTUAL LINKS
        // =============================================
        
        const STRIPE_PAYMENT_LINKS = {
            monthly: 'https://buy.stripe.com/3cI8wOesY6Wp6mz2NM8Vi02',
            yearly: 'https://buy.stripe.com/4gM3cu0C8fsV26jbki8Vi01'
        };

        // Initialize Firebase
        let app;
        let auth;
        let db;
        let currentUser = null;
        let userCoins = 50;
        let userSubscription = 'free';
        let selectedPaymentOption = 'monthly';

        // =============================================
        // FIREBASE INITIALIZATION
        // =============================================
        
        function initializeFirebase() {
            try {
                app = firebase.initializeApp(firebaseConfig);
                auth = firebase.auth();
                db = firebase.firestore();
                
                console.log('✅ Firebase initialized successfully');
                
                // Auth state listener
                auth.onAuthStateChanged((user) => {
                    if (user) {
                        currentUser = {
                            uid: user.uid,
                            email: user.email,
                            displayName: user.displayName || 'BrainyBuddy',
                            isAnonymous: user.isAnonymous
                        };
                        updatePlayerInfo();
                        loadUserSubscription();
                        showScreen('gameHub');
                    } else {
                        currentUser = null;
                    }
                });
                
            } catch (error) {
                console.error('Firebase initialization error:', error);
            }
        }

        // =============================================
        // AUTHENTICATION & PAYMENT FLOW
        // =============================================
        
        function checkAuthAndShowPricing() {
            if (!currentUser) {
                // Show login required modal
                showLoginModal();
                return;
            }
            
            // User is logged in, show pricing
            showScreen('pricingScreen');
            updatePricingUserInfo();
        }
        
        function showLoginModal() {
            document.getElementById('loginRequiredModal').classList.add('active');
        }
        
        function hideLoginModal() {
            document.getElementById('loginRequiredModal').classList.remove('active');
        }
        
        function redirectToLogin() {
            hideLoginModal();
            showScreen('loginScreen');
        }
        
        function updatePricingUserInfo() {
            if (currentUser) {
                document.getElementById('pricingUserName').textContent = currentUser.displayName;
                const firstLetter = currentUser.displayName.charAt(0).toUpperCase();
                document.getElementById('pricingAvatar').textContent = firstLetter;
            }
        }

        // =============================================
        // PAYMENT FUNCTIONS
        // =============================================
        
        function selectPaymentOption(option) {
            selectedPaymentOption = option;
            
            // Update UI
            document.querySelectorAll('.payment-option').forEach(el => {
                el.classList.remove('selected');
            });
            event.target.closest('.payment-option').classList.add('selected');
        }
        
        function processStripePayment() {
            // Double-check authentication
            if (!currentUser) {
                showLoginModal();
                return;
            }
            
            // Show processing screen
            showScreen('paymentProcessing');
            
            // Get the appropriate Stripe payment link
            const paymentLink = STRIPE_PAYMENT_LINKS[selectedPaymentOption];
            
            if (!paymentLink) {
                alert('❌ Payment option not configured. Please contact support.');
                showScreen('pricingScreen');
                return;
            }
            
            // Redirect to Stripe payment page
            setTimeout(() => {
                // Add user email to prefill if available
                let finalPaymentLink = paymentLink;
                if (currentUser && currentUser.email) {
                    finalPaymentLink += '?prefilled_email=' + encodeURIComponent(currentUser.email);
                }
                
                // Redirect to Stripe
                window.location.href = finalPaymentLink;
            }, 1500);
        }
        
        function checkPremiumAccess(gameName) {
            if (userSubscription === 'premium') {
                alert(`🎮 Launching ${gameName}...\n\nPremium feature - enjoy!`);
                // Here you would start the premium game
            } else {
                alert(`🌟 ${gameName} is a Premium Feature!\n\nUpgrade to Super Explorer to unlock this game and all other premium content.`);
                checkAuthAndShowPricing();
            }
        }
        
        async function updateUserSubscription() {
            if (!currentUser) return;
            
            try {
                await db.collection('users').doc(currentUser.uid).set({
                    subscription: userSubscription,
                    subscriptionUpdated: firebase.firestore.FieldValue.serverTimestamp()
                }, { merge: true });
                
                console.log('✅ Subscription updated in Firestore');
            } catch (error) {
                console.error('Subscription update error:', error);
            }
        }
        
        async function loadUserSubscription() {
            if (!currentUser || currentUser.isAnonymous) return;
            
            try {
                const doc = await db.collection('users').doc(currentUser.uid).get();
                if (doc.exists) {
                    const data = doc.data();
                    userSubscription = data.subscription || 'free';
                    updatePremiumUI();
                }
            } catch (error) {
                console.error('Subscription load error:', error);
            }
        }
        
        function updatePremiumUI() {
            // Update plan display
            document.getElementById('userPlan').textContent = userSubscription.toUpperCase();
            
            // Update hub subtitle
            const subtitle = document.getElementById('hubSubtitle');
            const premiumIcon = document.getElementById('premiumIcon');
            
            if (userSubscription === 'premium') {
                subtitle.textContent = '🎉 All premium games unlocked!';
                premiumIcon.textContent = '🌟';
                subtitle.style.color = 'var(--primary-green)';
            } else {
                subtitle.textContent = 'Free games available for everyone!';
                premiumIcon.textContent = '⭐';
                subtitle.style.color = 'inherit';
            }
        }

        // =============================================
        // AUTHENTICATION FUNCTIONS
        // =============================================
        
        async function realGoogleSignIn() {
            setButtonLoading('googleSignIn', true);
            updateLoginStatus('Connecting to Google...', 'info');
            
            try {
                const provider = new firebase.auth.GoogleAuthProvider();
                const result = await auth.signInWithPopup(provider);
                updateLoginStatus('✅ Successfully signed in with Google!', 'success');
                
                // Auto-redirect to pricing after successful login
                setTimeout(() => {
                    showScreen('pricingScreen');
                    updatePricingUserInfo();
                }, 1000);
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                updateLoginStatus(`❌ Google sign-in failed: ${error.message}`, 'error');
            } finally {
                setButtonLoading('googleSignIn', false);
            }
        }
        
        async function tryQuickPlay() {
            setButtonLoading('quickPlayBtn', true);
            updateLoginStatus('Starting quick play session...', 'info');
            
            try {
                const result = await auth.signInAnonymously();
                updateLoginStatus('✅ Quick play started!', 'success');
                
                // Redirect to game hub for guest users
                setTimeout(() => {
                    showScreen('gameHub');
                }, 1000);
                
            } catch (error) {
                console.error('Anonymous auth error:', error);
                updateLoginStatus(`❌ Quick play failed: ${error.message}`, 'error');
            } finally {
                setButtonLoading('quickPlayBtn', false);
            }
        }
        
        async function handleLogout() {
            try {
                await auth.signOut();
                showScreen('loginScreen');
            } catch (error) {
                console.error('Logout error:', error);
            }
        }

        // =============================================
        // NAVIGATION FUNCTIONS
        // =============================================
        
        function goBackFromLogin() {
            if (currentUser) {
                showScreen('gameHub');
            } else {
                showScreen('landingScreen');
            }
        }
        
        function goBackFromPricing() {
            if (currentUser) {
                showScreen('gameHub');
            } else {
                showScreen('landingScreen');
            }
        }

        // =============================================
        // GAME MANAGEMENT (Memory & Math games)
        // =============================================
        
        function startGame(gameType) {
            switch(gameType) {
                case 'memory':
                    initializeMemoryGame();
                    showScreen('memoryGame');
                    break;
                case 'math':
                    initializeMathGame();
                    showScreen('mathGame');
                    break;
            }
        }

        // Memory Game Implementation
        let memoryGame = {
            cards: [],
            flippedCards: [],
            matchedPairs: 0,
            moves: 0
        };

        const emojiPairs = ['🐶', '🐱', '🐼', '🐨', '🐯', '🦁'];

        function initializeMemoryGame() {
            const grid = document.getElementById('memoryGrid');
            grid.innerHTML = '';
            memoryGame.cards = [...emojiPairs, ...emojiPairs].sort(() => Math.random() - 0.5);
            memoryGame.flippedCards = [];
            memoryGame.matchedPairs = 0;
            memoryGame.moves = 0;
            updateMemoryDisplay();

            memoryGame.cards.forEach((emoji, index) => {
                const card = document.createElement('div');
                card.className = 'memory-card';
                card.innerHTML = emoji;
                card.dataset.emoji = emoji;
                card.addEventListener('click', () => flipCard(card));
                grid.appendChild(card);
            });
        }

        function flipCard(card) {
            if (card.classList.contains('flipped') || memoryGame.flippedCards.length === 2) return;
            
            card.classList.add('flipped');
            memoryGame.flippedCards.push(card);
            
            if (memoryGame.flippedCards.length === 2) {
                memoryGame.moves++;
                updateMemoryDisplay();
                setTimeout(checkMemoryMatch, 500);
            }
        }

        function checkMemoryMatch() {
            const [card1, card2] = memoryGame.flippedCards;
            if (card1.dataset.emoji === card2.dataset.emoji) {
                card1.classList.add('matched');
                card2.classList.add('matched');
                memoryGame.matchedPairs++;
                if (memoryGame.matchedPairs === emojiPairs.length) {
                    endMemoryGame();
                }
            } else {
                card1.classList.remove('flipped');
                card2.classList.remove('flipped');
            }
            memoryGame.flippedCards = [];
        }

        function endMemoryGame() {
            const coinsEarned = Math.max(10, 30 - memoryGame.moves);
            userCoins += coinsEarned;
            updateCoins();
            document.getElementById('memoryMessage').textContent = 
                `🎉 You won! Earned ${coinsEarned} coins!`;
        }

        function resetMemoryGame() {
            initializeMemoryGame();
            document.getElementById('memoryMessage').textContent = '';
        }

        // Math Game Implementation
        let mathGame = {
            correct: 0,
            streak: 0,
            currentProblem: null
        };

        function initializeMathGame() {
            generateMathProblem();
            document.getElementById('mathCorrect').textContent = mathGame.correct;
            document.getElementById('mathStreak').textContent = mathGame.streak;
        }

        function generateMathProblem() {
            const a = Math.floor(Math.random() * 8) + 1;
            const b = Math.floor(Math.random() * 8) + 1;
            const answer = a + b;
            const wrongAnswers = [answer + 1, answer - 1, answer + 2].filter(n => n > 0 && n !== answer);
            
            mathGame.currentProblem = { a, b, answer };
            document.getElementById('mathProblem').textContent = `${a} + ${b} = ?`;
            
            const options = [answer, ...wrongAnswers].sort(() => Math.random() - 0.5);
            const optionsContainer = document.getElementById('mathOptions');
            optionsContainer.innerHTML = '';
            
            options.forEach(option => {
                const button = document.createElement('button');
                button.className = 'math-option';
                button.textContent = option;
                button.onclick = () => checkMathAnswer(option);
                optionsContainer.appendChild(button);
            });
        }

        function checkMathAnswer(selected) {
            const buttons = document.querySelectorAll('.math-option');
            buttons.forEach(btn => {
                btn.disabled = true;
                if (parseInt(btn.textContent) === mathGame.currentProblem.answer) {
                    btn.style.background = 'var(--primary-green)';
                } else if (parseInt(btn.textContent) === selected) {
                    btn.style.background = 'var(--primary-red)';
                }
            });

            if (selected === mathGame.currentProblem.answer) {
                mathGame.correct++;
                mathGame.streak++;
                document.getElementById('mathMessage').textContent = '✅ Correct! Great job!';
                if (mathGame.correct % 5 === 0) {
                    userCoins += 5;
                    updateCoins();
                    document.getElementById('mathMessage').textContent += ' +5 coins!';
                }
            } else {
                mathGame.streak = 0;
                document.getElementById('mathMessage').textContent = '❌ Try again!';
            }

            updateMathDisplay();
            setTimeout(() => {
                document.getElementById('mathMessage').textContent = '';
                generateMathProblem();
            }, 1500);
        }

        function resetMathGame() {
            mathGame.correct = 0;
            mathGame.streak = 0;
            initializeMathGame();
        }

        // =============================================
        // HELPER FUNCTIONS
        // =============================================
        
        function updatePlayerInfo() {
            if (currentUser) {
                document.getElementById('playerName').textContent = currentUser.displayName;
                const firstLetter = currentUser.displayName.charAt(0).toUpperCase();
                document.getElementById('userAvatar').textContent = firstLetter;
            }
        }

        function updateCoins() {
            document.getElementById('coinCount').textContent = userCoins;
        }

        function updateMemoryDisplay() {
            document.getElementById('matchCount').textContent = memoryGame.matchedPairs;
            document.getElementById('moveCount').textContent = memoryGame.moves;
        }

        function updateMathDisplay() {
            document.getElementById('mathCorrect').textContent = mathGame.correct;
            document.getElementById('mathStreak').textContent = mathGame.streak;
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
        }

        function updateLoginStatus(message, type) {
            const status = document.getElementById('loginStatus');
            status.textContent = message;
            status.className = `status-box ${type}`;
            status.style.display = 'block';
        }

        function setButtonLoading(buttonId, isLoading) {
            const button = document.getElementById(buttonId);
            if (button) {
                button.disabled = isLoading;
                const originalText = button.innerHTML;
                if (isLoading) {
                    button.setAttribute('data-original-text', originalText);
                    button.innerHTML = '<span class="loading"></span> Loading...';
                } else {
                    button.innerHTML = button.getAttribute('data-original-text') || originalText;
                }
            }
        }

        // Initialize the application
        window.onload = function() {
            initializeFirebase();
            initializeMemoryGame();
            
            // Set default payment option
            selectPaymentOption('monthly');
        };
    </script>
</body>
</html>
